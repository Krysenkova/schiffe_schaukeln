class Stone {
  Playfield p;
  PImage stone;

  boolean overStone = false;
  boolean locked = false;
  boolean stoneMoved;
  float positionX;
  float positionY;
  float posXinitial;
  float posYinitial;
  float stoneXOld;
  float stoneYOld;
  int stoneSize;
  float transparency=100;
  boolean transparencyOn;
  boolean fadedAway = false;
  Timer timer;

  Stone(float stoneXtemp, float stoneYtemp, 
    int stoneSizeTemp, Playfield pf) {
    stone = loadImage("stone.png");

    p = pf;

    positionX = stoneXtemp;
    positionY = stoneYtemp;
    stoneXOld = positionX;
    stoneYOld = positionY;

    posXinitial = stoneXtemp;
    posYinitial = stoneYtemp;

    imageMode(CENTER);
    stoneSize = stoneSizeTemp;
  }

  void display() {
    if (transparencyOn) {
      tint(255, 100);
      fadeAway();
    }
    else if (fadedAway) {
      setInitialPosition();
    } else {
      noTint();
    }
    image(stone, 
      positionX, positionY, 
      stoneSize, stoneSize);
  }

  void update() {
    if (mouseX > positionX - stoneSize / 2 &&
      mouseX < positionX + stoneSize / 2 &&
      mouseY > positionY - stoneSize / 2 && 
      mouseY < positionY + stoneSize / 2) {
      overStone = true;
      if (!locked&&!drag) {
      }
    } else {

      overStone = false;
    }
  }

  void displayWithShadow() {
    rectMode(CENTER);
    noStroke();
    fill(#083F48, 180);
    rect(positionX + 10, positionY+10, stoneSize, stoneSize, 10);
    display();
  }

  void initMove() {
    if (drag)
      return; 
    if (overStone && mousePressed) {
      locked = true;
      drag=true;
    } else {
      locked = false;
    }
  }

  void interact() {
    if (drag&&locked) {
      positionX = mouseX;
      positionY = mouseY;
      displayWithShadow();
    }
  }
  boolean stoneMoved() {
    return stoneMoved = (!overStone && !locked && positionX > stoneXOld + 100 && positionY > stoneYOld + 100);
  }

  void afterMove() {
    if (!drag&&locked) {
      transparencyOn=true; //doesn't work with the second drag
      waves.add(new Waves(positionX, positionY, stoneSize*2));
      locked = false;
    }
  }

  void setInitialPosition() {
    positionX = posXinitial;
    positionY = posYinitial;
    if (transparency < 255) { 
      transparency += 0.20;
    }
    tint(255, transparency);
    if (transparency>=255) {
      fadedAway=false;
    }
  }

  void fadeAway() {
    if (transparency > 0) { 
      transparency -= 0.20;
     
    }
    tint(255, transparency);
    if (transparency<=0) {
      fadedAway=true;
      transparencyOn=false;
    }
  }
}

